{
	"SPDX-FileCopyrightText":  " Â© 2024 TU Wien <vadl@tuwien.ac.at>                                ",
	"SPDX-License-Identifier": " Apache-2.0                                                        ",
	"comment-0": "  TextMate json grammar for the processor description language VADL for OpenVADL ",
	"comment-1": "  When changing the grammar remember the undocumented pitfalls:                  ",
	"comment-2": "  Matches are in the order of patterns.                                          ",
	"comment-3": "  A pattern matches only till the end of the line, \\s does not cross the line.  ",
	"comment-4": "  Multi line matches are only possible with begin / end.                         ",
	"comment-5": "  Look ahead / behind must be surrounded by parantheses (?=regex) / (?<=regex).  ",
	"comment-6": "  This grammar works with VS Code and IntelliJ                                   ",
	"comment-7": "                                                                                 ",
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "VADL",
	"patterns": [
		{  "include": "#commentsLiterals" }
		,{ "include": "#isaDefinition"    }
		,{ "include": "#abiDefinition"    }
		,{ "include": "#asmDefinition"    }
		,{ "include": "#miaDefinition"    }
		,{ "include": "#procDefinition"   }
		,{ "include": "#modelDefinition"  }
		,{ "include": "#modelNames"       }
		,{ "include": "#commons"          }
		,{ "include": "#toplevel"         }
		,{ "include": "#expressions"      }
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.block",
					"begin": "(\\/\\*)",
					"end": "(\\*\\/)"
				}
				,{
					"name": "comment.line.double-slash",
					"begin": "(\\/\\/)",
					"end": "(?:\\n|$)"
				}
			]
		},
		"toplevel": {
			"comment": "include toplevel must be placed before include expressions !!",
			"patterns": [
				{  "match": "\\b(import)\\s+(\".+\")\\S*\\s+(with)\\b",
					"captures": { "1": { "name": "keyword.other.common" },
					              "2": { "name": "string.quoted.double" },
					              "3": { "name": "keyword.other.common" }}
				}
				,{  "match": "\\b(import)\\s+('.+')\\S*\\s+(with)\\b",
					"captures": { "1": { "name": "keyword.other.common" },
					              "2": { "name": "string.quoted.single" },
					              "3": { "name": "keyword.other.common" }}
				}
				,{  "match": "\\b(import)\\s+\\S+\\s+(with)\\b",
					"captures": { "1": { "name": "keyword.other.common" },
					              "2": { "name": "keyword.other.common" }}
				}
				,{
					"name": "keyword.other.common",
					"match": "(import|source|-<|>-)"
				}
			]
		},
		"commons": {
			"patterns": [
				{
					"name": "keyword.other.common",
					"match": "\\b(constant|enumeration|format|function|match(?=\\s*\\:)|model\\-type|record|using)\\b"
				}
			]
		},
		"expressions": {
			"patterns": [
				{
					"name": "constant.language",
					"match": "\\b(true|false)\\b"
				}
				,{
					"name": "keyword.control",
					"match": "\\b(append|assert|as|do|else|exists|fold|forall|if|in|let|match|raise|stop|tensor|then|with)\\b"
				}
			]
		},
		"isaKeywords": {
			"patterns": [
				{   "include": "#commons" }
				,{
					"name": "keyword.other.isa",
					"match": "\\b(alias|assembly|counter|decimal|encode|exception|encoding|file|group|instruction|memory|mnemonic|none|operation|predicate|process|program|pseudo|register|relocation|sdec|udec)\\b"
				}
				,{
					"name": "keyword.control",
					"match": "\\b(delayed|lock)\\b"
				}
				,{  "include": "#expressions" }
			]
		},
		"modelNames": {
			"patterns": [
				{
					"name": "entity.name.type",
					"match": "(\\$[\\w\\d]+)\\b"
				}
			]
		},
		"sequences": {
			"patterns": [
				{
					"name": "keyword.other.abi",
					"match": "\\b((address|call|constant|nop|register\\s+adjustment|return)\\s+sequence)\\b"
				}
			]
		},
		"abiKeywords": {
			"patterns": [
				{
					"name": "keyword.other.abi",
					"match": "\\b(alias\\s+register|(callee|caller)\\s+saved|function\\s+argument)\\b"
				}
				,{
					"name": "keyword.other.abi",
					"match": "\\b((frame|global|stack|thread)\\s+pointer|special\\s+(return|call|(local|global|absolute)\\s+address\\s+load)\\s+instruction|return\\s+(address|value))\\b"
				}
				,{
					"name": "keyword.other.abi",
					"match": "\\b((size_t|int\\s+max)\\s+type|(long|pointer)\\s+(width|align))\\b"
				}
				,{ "include": "#sequences" }
			]
		},
		"miaKeywords": {
			"patterns": [
				{
					"name": "keyword.other.mia",
					"match": "\\b(cache|executable|firmware|halt|logic|pipeline|process|signal|shutdown|stage|startup|start|stop)\\b" 
				}
			]
		},
		"procKeywords": {
			"patterns": [
				{
					"name": "keyword.other.proc",
					"match": "\\b(reset|memory\\s+region|exit\\s+address)\\b" 
				}, 
				{
					"name": "constant.language.vadl",
					"match": "\\b(RAM|ROM)\\b"
				}
			]
		},
		"asmKeywords": {
			"patterns": [
				{
					"name": "keyword.other.asm",
					"match": "\\b(constant|directives|enumeration|function|grammar|mnemonic|modifiers)\\b" 
				}
				,{
					"name": "keyword.control",
					"match": "(@[\\w\\d]+)\\b" 
				}
			]
		},
		"operators": {
			"comment": "Do not reorder, longer patterns must be before the shorter ones !!",
			"patterns": [
				{   "match": "(\\->|=>)",
					"name": "keyword.operator" }
				,{  "match": "(=|!=|<=|>=|<(?!<)|>(?!>))",
					"name": "keyword.operator" }
				,{  "match": "(:=)",
					"name": "keyword.operator" }
				,{  "match": "(\\+\\||\\+|\\-\\||\\-|\\*\\#|\\*|/|%)",
					"name": "keyword.operator" }
				,{  "match": "(&&|&|\\|\\||\\||!|\\^|<>>|<<>|<<|>>)",
					"name": "keyword.operator" }
				,{  "match": "(\\.\\.|::)",
					"name": "keyword.operator" }
			]
		},
		"numbers": {
			"patterns": [
				{   "match": "\\b0[xX]\\h[\\h']*\\b",
					"name": "constant.numeric.integer.hexadecimal" }
				,{  "match": "\\b0[bB][01][01']*\\b",
					"name": "constant.numeric.integer.binary" }
				,{  "match": "\\b\\d[\\d']*\\b",
					"name": "constant.numeric.integer.decimal" }
			]
		}
		,
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape",
							"match": "\\\\."
						}
					]
				}
				,{
					"name": "string.quoted.single",
					"begin": "'",
					"end": "'",
					"patterns": [
						{
							"name": "constant.character.escape",
							"match": "\\\\."
						}
					]
				}
			]
		}
		,"commentsLiterals": {
			"patterns": [
				{   "include": "#comments" }
				,{  "include": "#numbers"  }
				,{  "include": "#strings"  }
			]
		}
		,"isaBraces": {
			"begin": "\\{",
			"end": "\\}",
			"patterns": [
				{   "include": "#commentsLiterals" }
				,{  "include": "#modelDefinition"  }
				,{  "include": "#modelNames"       }
				,{  "include": "#operators"        }
				,{  "include": "#isaKeywords"      }
				,{  "include": "#isaBraces"        }
				,{  "include": "#sequences"        }
			]
		}
		,"abiBraces": {
			"begin": "\\{",
			"end": "\\}",
			"patterns": [
				{   "include": "#commentsLiterals" }
				,{  "include": "#abiKeywords"      }
				,{  "include": "#abiBraces"        }
			]
		}
		,"miaBraces": {
			"begin": "\\{",
			"end": "\\}",
			"patterns": [
				{   "include": "#commentsLiterals" }
				,{  "include": "#miaKeywords"      }
				,{  "include": "#isaKeywords"      }
				,{  "include": "#miaBraces"        }
			]
		}
		,"procBraces": {
			"begin": "\\{",
			"end": "\\}",
			"patterns": [
				{   "include": "#commentsLiterals" }
				,{  "include": "#operators"        }
				,{  "include": "#procKeywords"     }
				,{  "include": "#isaKeywords"      }
				,{  "include": "#procBraces"       }
			]
		}
		,"asmBraces": {
			"begin": "\\{",
			"end": "\\}",
			"patterns": [
				{   "include": "#commentsLiterals" }
				,{  "include": "#asmKeywords"      }
				,{  "include": "#asmBraces"        }
			]
		}
		,"modelParentheses": {
			"begin": "\\(",
			"end":   "\\)",
			"patterns": [
				{   "include": "#commentsLiterals" }
				,{  "match": "\\b([\\w\\d]+)\\s*:",
					"captures": { "1": { "name": "entity.name.type" } }
				}
				,{  "include": "#modelParentheses" }
			]
		}
		,"isaDefinition": {
			"begin": "\\b(instruction)\\s+(set)\\s+(architecture)\\b",
			"beginCaptures": {
				"1": { "name": "keyword.declaration" },
				"2": { "name": "keyword.declaration" },
				"3": { "name": "keyword.declaration" }
			},
			"end": "(?<=\\})",
			"patterns": [
				{   "include": "#commentsLiterals" }
				,{  "name": "keyword.other.isa",
					"match": "\\b(extending)\\b" }
				,{  "include": "#isaBraces" }
			]
		}
		,"modelDefinition": {
			"begin": "\\b(model)\\s+(\\$?[\\w\\d]+)\\b",
			"beginCaptures": {
				"1": { "name": "keyword.declaration" },
				"2": { "name": "entity.name.type"    }
			},
			"end": "(?<=\\})",
			"patterns": [
				{   "include": "#commentsLiterals" }
				,{  "include": "#modelParentheses" }
				,{  "include": "#isaBraces"        }
			]
		}
		,"abiDefinition": {
			"begin": "\\b(application)\\s+(binary)\\s+(interface)\\b",
			"beginCaptures": {
				"1": { "name": "keyword.declaration" },
				"2": { "name": "keyword.declaration" },
				"3": { "name": "keyword.declaration" }
			},
			"end": "(?<=\\})",
			"patterns": [
				{   "include": "#commentsLiterals" }
				,{  "name": "keyword.other.abi",
					"match": "\\b(for)\\b"  }
				,{  "include": "#abiBraces" }
			]
		}
		,"miaDefinition": {
			"name": "entity.name.section.mia",
			"begin": "\\b(micro)\\s+(architecture)\\b",
			"beginCaptures": {
				"1": { "name": "keyword.declaration" },
				"2": { "name": "keyword.declaration" }
			},
			"end": "(?<=\\})",
			"patterns": [
				{   "include": "#commentsLiterals" }
				,{  "name": "keyword.other.mia",
					"match": "\\b(implements)\\b"  }
				,{  "include": "#miaBraces" }
			]
		}
		,"procDefinition": {
			"name": "entity.name.section.mia",
			"begin": "\\b(processor)\\b",
			"beginCaptures": {
				"1": { "name": "keyword.declaration" }
			},
			"end": "(?<=\\})",
			"patterns": [
				{   "include": "#commentsLiterals" }
				,{  "name": "keyword.other.mia",
					"match": "\\b(implements|with)\\b" }
				,{  "include": "#procBraces" }
			]
		}
		,"asmDefinition": {
			"name": "entity.name.section.asm",
			"begin": "\\b(assembly)\\s+(description)\\b",
			"beginCaptures": {
				"1": { "name": "keyword.declaration" },
				"2": { "name": "keyword.declaration" }
			},
			"end": "(?<=\\})",
			"patterns": [
				{   "include": "#commentsLiterals" }
				,{  "name": "keyword.other.asm",
					"match": "\\b(for)\\b"  }
				,{  "include": "#asmBraces" }
			]
		}
	},
	"scopeName": "source.vadl"
}
